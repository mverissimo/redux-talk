{"version":3,"sources":["reportWebVitals.js","components/AppLayout/AppLayout.js","containers/App/App.js","pages/Home/components/List/utils.js","redux/modules/character/constants.js","redux/modules/character/actions.js","services/index.js","redux/modules/character/sagas.js","redux/modules/character/reducers.js","redux/modules/character/selectors.js","pages/Home/components/List/List.js","pages/Home/components/Filter/Filter.js","pages/Home/Home.js","routes/Routes.js","App.js","redux/reducers.js","redux/sagas.js","redux/store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppLayoyut","children","AppContainer","AppLayout","getColor","status","Alive","unknown","Dead","CHARACTER_GET","CHARACTER_GET_SUCCESS","CHARACTER_GET_FAILURE","CHARACTER_GET_ALL","CHARACTER_GET_ALL_SUCCESS","CHARACTER_GET_ALL_FAILURE","FILTER_CHARACTERS","getCharacter","id","type","Constants","getCharacterSuccess","payload","getCharacterFailure","error","getAll","page","getAllSuccess","getAllFailure","filterCharacters","ENDPOINT","getCharacters","a","axios","get","params","data","catch","err","response","root","call","api","characters","put","Actions","toast","takeLatest","initialState","list","isRequest","statusById","idList","all","alive","dead","hasNext","reducer","state","action","produce","draft","pages","info","next","results","forEach","character","push","getById","getByStatus","currentStatus","statusList","ListItem","memo","useSelector","Selectors","shallowEqual","Row","Cell","name","palette","List","handleLoadMore","isLoading","hasDividers","isHoverable","Head","HeadCell","Body","map","Foot","textAlign","size","disabled","onClick","Filter","handleFilter","value","Home","dispatch","useDispatch","useState","currentPage","setCurrentPage","useEffect","onLoadMore","useCallback","onFilter","Routes","basename","exact","path","component","App","store","reducers","combineReducers","Character","fork","CharacterSagas","createBrowserHistory","preloadedState","sagaMiddleware","createSagaMiddleware","sagaMonitor","createSagaMonitor","level","actionDispatch","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","createStore","createRootReducer","applyMiddleware","run","rootSaga","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.86c16820.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { Container } from \"bumbag\";\n\nfunction AppLayoyut({ children }) {\n  return <Container>{children}</Container>;\n}\n\nexport default AppLayoyut;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Toaster } from \"react-hot-toast\";\n\nimport { AppLayout } from \"../../components/AppLayout\";\n\nfunction AppContainer({ children }) {\n  return (\n    <AppLayout>\n      <Toaster/>\n      {children}\n    </AppLayout>\n  );\n}\n\nAppContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppContainer;\n","export function getColor(status) {\n  if (!status) {\n    return null;\n  }\n\n  const COLOR_STATUS = {\n    Alive: \"success\",\n    unknown: \"primary\",\n    Dead: \"danger\",\n  };\n\n  return COLOR_STATUS[status];\n}\n","export const CHARACTER_GET = \"@CHARACTER_GET\";\nexport const CHARACTER_GET_SUCCESS = \"@CHARACTER_GET_SUCCESS\";\nexport const CHARACTER_GET_FAILURE = \"@CHARACTER_GET_FAILURE\";\n\nexport const CHARACTER_GET_ALL = \"@CHARACTER_GET_ALL\";\nexport const CHARACTER_GET_ALL_SUCCESS = \"@CHARACTER_GET_ALL_SUCCESS\";\nexport const CHARACTER_GET_ALL_FAILURE = \"@CHARACTER_GET_ALL_FAILURE\";\n\nexport const FILTER_CHARACTERS = \"@FILTER_CHARACTERS\";\n\n\n// eslint-disable-next-line\nexport default {\n  CHARACTER_GET,\n  CHARACTER_GET_SUCCESS,\n  CHARACTER_GET_FAILURE,\n  CHARACTER_GET_ALL,\n  CHARACTER_GET_ALL_SUCCESS,\n  CHARACTER_GET_ALL_FAILURE,\n  FILTER_CHARACTERS,\n};\n","import { Constants } from '.';\n\nexport const getCharacter = (id) => ({\n  type: Constants.CHARACTER_GET,\n  id\n});\n\nexport const getCharacterSuccess = (payload) => ({\n  type: Constants.CHARACTER_GET_SUCCESS,\n  payload\n});\n\nexport const getCharacterFailure = (error) => ({\n  type: Constants.CHARACTER_GET_FAILURE,\n  error\n});\n\nexport const getAll = (page) => ({\n  type: Constants.CHARACTER_GET_ALL,\n  page\n});\n\nexport const getAllSuccess = (payload) => ({\n  type: Constants.CHARACTER_GET_ALL_SUCCESS,\n  payload\n});\n\nexport const getAllFailure = (error) => ({\n  type: Constants.CHARACTER_GET_ALL_FAILURE,\n  error\n});\n\nexport const filterCharacters = (status) => ({\n  type: Constants.FILTER_CHARACTERS,\n  status\n});\n","import axios from \"axios\";\n\nconst ENDPOINT = \"https://rickandmortyapi.com/api/character\";\n\nexport const getCharacters = async (page) => {\n  const response = await axios\n    .get(ENDPOINT, {\n      params: {\n        page,\n      },\n    })\n    .then(({ data }) => data)\n    .catch((err) => {\n      throw err.response;\n    });\n\n  return response;\n};\n\nexport const getCharacter = async (id) => {\n  const response = await axios\n    .get(`${ENDPOINT}/${id}`)\n    .then(({ data }) => data)\n    .catch((err) => {\n      throw err.response;\n    });\n\n  return response;\n};\n","import { takeLatest, call, put } from \"redux-saga/effects\";\nimport toast from \"react-hot-toast\";\n\nimport { Constants, Actions } from \".\";\n\nimport * as api from \"../../../services\";\n\nfunction* getAll({ page }) {\n  try {\n    const characters = yield call(api.getCharacters, page);\n\n    yield put(Actions.getAllSuccess(characters));\n  } catch (e) {\n    yield put(Actions.getAllFailure(e.data.error));\n    yield call(toast.error, e.data.error);\n  }\n}\n\nexport default function* root() {\n  yield takeLatest(Constants.CHARACTER_GET_ALL, getAll);\n}\n","import produce from 'immer';\n\nimport { Constants } from '.';\n\nconst initialState = {\n  list: {\n    isRequest: true,\n    status: 'all',\n    statusById: {},\n    idList: {\n      all: [],\n      alive: [],\n      dead: [],\n      unknown: []\n    },\n    hasNext: null\n  }\n};\n\nexport default function reducer(state = initialState, action = {}) {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case Constants.CHARACTER_GET_ALL:\n        draft.list.isRequest = true;\n\n        break;\n\n      case Constants.CHARACTER_GET_ALL_SUCCESS:\n        draft.list.isRequest = false;\n        draft.list.pages = action.payload.info.pages;\n        draft.list.hasNext = action.payload.info.next;\n\n        action.payload.results.forEach((character) => {\n          draft.list.idList.all.push(character.id);\n          draft.list.statusById[character.id] = character;\n\n          if (character.status === 'Alive') {\n            draft.list.idList.alive.push(character.id);\n          }\n\n          if (character.status === 'Dead') {\n            draft.list.idList.dead.push(character.id);\n          }\n\n          if (character.status === 'unknown') {\n            draft.list.idList.unknown.push(character.id);\n          }\n        });\n\n        break;\n\n      case Constants.CHARACTER_GET_ALL_FAILURE:\n        draft.list.isRequest = false;\n        draft.list.error = action.error;\n\n        break;\n\n      case Constants.FILTER_CHARACTERS:\n        draft.list.status = action.status;\n\n        break;\n\n      default:\n        return state;\n    }\n  });\n}\n","export const getById = (state, id) => state.statusById[id];\n\nexport const getByStatus = (state) => {\n  const { status, idList, statusById } = state;\n\n  const currentStatus = idList[status];\n  const statusList = [];\n\n  currentStatus.forEach((id) => {\n    statusList.push(statusById[id].id);\n  });\n\n  return statusList;\n};\n","import React, { memo } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport { Spinner, Table, Button, Tag } from \"bumbag\";\n\nimport { getColor } from \"./utils\";\nimport { Selectors } from \"../../../../redux/modules/character\";\n\nconst ListItem = memo(({ id }) => {\n  const character = useSelector(\n    (state) => Selectors.getById(state.character.list, id),\n    shallowEqual\n  );\n\n  return (\n    <Table.Row key={id}>\n      <Table.Cell>{character.name}</Table.Cell>\n      <Table.Cell>\n        <Tag palette={getColor(character.status)}>{character.status}</Tag>\n      </Table.Cell>\n    </Table.Row>\n  );\n});\n\nfunction List({ handleLoadMore }) {\n  const { isLoading, isRequest, hasNext } = useSelector(\n    (state) => state.character.list,\n    shallowEqual\n  );\n  const characters = useSelector(\n    (state) => Selectors.getByStatus(state.character.list),\n    shallowEqual\n  );\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  return (\n    <Table hasDividers isHoverable>\n      <Table.Head>\n        <Table.Row>\n          <Table.HeadCell>Name</Table.HeadCell>\n          <Table.HeadCell>Status</Table.HeadCell>\n        </Table.Row>\n      </Table.Head>\n\n      <Table.Body>\n        {characters.map((id) => (\n          <ListItem key={id} id={id} />\n        ))}\n      </Table.Body>\n\n      <Table.Foot>\n        <Table.Row>\n          <Table.Cell />\n          <Table.Cell textAlign=\"right\">\n            <Button size=\"small\" isLoading={isRequest} disabled={!hasNext} onClick={handleLoadMore} >\n              Load more\n            </Button>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Foot>\n    </Table>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Group, Button } from \"bumbag\";\n\nfunction Filter({ handleFilter }) {\n  const { character } = useSelector((state) => state);\n\n  const filters = [\n    {\n      name: \"All\",\n      value: \"all\",\n    },\n    {\n      name: \"Alive\",\n      value: \"alive\",\n    },\n    {\n      name: \"Dead\",\n      value: \"dead\",\n    },\n    {\n      name: \"Unknown\",\n      value: \"unknown\",\n    },\n  ];\n\n  return (\n    <Group>\n      {filters.map(({ name, value }) => (\n        <Button\n          key={value}\n          size=\"small\"\n          palette={value === character.list.status ? \"primary\" : \"default\"}\n          onClick={() => handleFilter(value)}\n        >\n          {name}\n        </Button>\n      ))}\n    </Group>\n  );\n}\n\nexport default Filter;\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { PageContent, Stack } from \"bumbag\";\n\nimport { List } from \"./components/List\";\nimport { Filter } from \"./components/Filter\";\n\nimport { Actions } from \"../../redux/modules/character\";\n\nfunction Home() {\n  const dispatch = useDispatch();\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    dispatch(Actions.getAll(currentPage));\n  }, [dispatch, currentPage]);\n\n  const onLoadMore = useCallback(() => {\n    setCurrentPage(currentPage + 1);\n  }, [currentPage]);\n\n  const onFilter = useCallback(\n    (value) => {\n      dispatch(Actions.filterCharacters(value));\n    },\n    [dispatch]\n  );\n\n  return (\n    <PageContent>\n      <Stack>\n        <Filter handleFilter={onFilter} />\n        <List handleLoadMore={onLoadMore} />\n      </Stack>\n    </PageContent>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { App } from \"../containers/App\";\nimport { Home } from \"../pages/Home\";\n\nfunction Routes() {\n  return (\n    <Router basename=\"redux-talk\">\n      <App>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </App>\n    </Router>\n  );\n}\n\nexport default Routes;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { Provider as BumbagProvider } from 'bumbag';\n\nimport { Routes } from './routes';\n\nexport const App = ({ store }) => (\n  <Provider store={store}>\n    <BumbagProvider>\n      <Routes />\n    </BumbagProvider>\n  </Provider>\n);\n","import { combineReducers } from \"redux\";\n\nimport { Reducer as Character } from \"./modules/character\";\n\nconst reducers = () =>\n  combineReducers({\n    character: Character,\n  });\n\nexport default reducers;\n","import { fork } from \"redux-saga/effects\";\n\nimport CharacterSagas from \"./modules/character/sagas\";\n\nexport default function* root() {\n  yield fork(CharacterSagas);\n}\n","import { createBrowserHistory } from \"history\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport createSagaMonitor from \"@clarketm/saga-monitor\";\n\nimport createRootReducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nexport const history = createBrowserHistory();\n\nfunction configureStoreDev(preloadedState) {\n  const sagaMiddleware = createSagaMiddleware({\n    sagaMonitor: createSagaMonitor({\n      level: \"log\",\n      actionDispatch: true,\n    }),\n  });\n\n  const composeEnhancer =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n  const middlewares = [sagaMiddleware];\n\n  const store = createStore(\n    createRootReducer(),\n    preloadedState,\n    composeEnhancer(applyMiddleware(...middlewares))\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n\nconst configureStore = configureStoreDev;\n\nexport default configureStore;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { App } from \"./App\";\nimport configureStore from \"./redux/store\";\n\nconst store = configureStore();\n\nrender(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}